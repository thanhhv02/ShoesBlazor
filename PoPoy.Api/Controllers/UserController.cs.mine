using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using PoPoy.Api.Services.AuthService;
using PoPoy.Shared.Dto;
using PoPoy.Shared.ViewModels;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace PoPoy.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IAuthService _authService;
        private readonly IConfiguration _configuration;
        public UserController(IAuthService authService, IConfiguration configuration)
        {
            _authService = authService;
            _configuration = configuration;
        }

        [HttpPost("login")]
        public async Task<ActionResult<ServiceResponse<string>>> Login(LoginRequest request)
        {
            var response = await _authService.Login(request);
            if (!response.Success)
            {
                return BadRequest(response);
            }

            return Ok(response);
        }

        [HttpPost("register")]
        public async Task<ActionResult<ServiceResponse<int>>> Register(RegisterRequest request)
        {
            var response = await _authService.Register(request);
            if (!response.Success)
            {
                return BadRequest(response);
            }

            return Ok(response);
        }

        [HttpPost("forget-password")]
        public async Task<ActionResult<ServiceResponse<string>>> ForgetPassword(string email)
        {
            if (string.IsNullOrEmpty(email))
                return NotFound(new ServiceErrorResponse<string>("Chưa nhập email"));

            var result = await _authService.ForgetPassword(email);

            if (result.Success)
                return Ok(result); // 200

            return BadRequest(result); // 400
        }

        [HttpGet("ConfirmEmail")]
        public async Task<IActionResult> ConfirmEmail(string userId, string token)
        {
            if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(token))
                return NotFound();

            var result = await _authService.ConfirmEmail(userId, token);

            if (result.Success)
            {
                return Redirect($"{_configuration["ApiUrl"]}/ConfirmEmail.html");
            }

            return BadRequest(result);
        }

        [HttpPost("change-password")]
        public async Task<IActionResult> ChangePasword(ChangePasswordRequest model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }

            var result = await _authService.ChangePassword(model);

            if (result.Success)
            {
                return Ok(result);
            }

            return BadRequest(result);
        }

        [HttpPost("reset-password")]
        public async Task<IActionResult> ResetPassword([FromForm] ResetPasswordRequest model)
        {
            if (ModelState.IsValid)
            {
                var result = await _authService.ResetPassword(model);

                if (result.Success)
                    return Redirect($"{_configuration["ApiUrl"]}/resetpassword.html"); ;

                return BadRequest(result);
            }

            return BadRequest("Some properties are not valid");
        }
    }
}
