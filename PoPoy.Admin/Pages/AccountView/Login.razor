@page "/login"
@layout LoginLayout;

@using Blazored.Toast.Services
@using PoPoy.Shared;
@using PoPoy.Shared.ViewModels;
@using PoPoy.Admin.Services;

@inject NavigationManager NavigationManager;
@inject IAuthService AuthService;
@inject IToastService _toastSvc

<PageInfos Title="Đăng nhập"></PageInfos>
@if (ShowErrors)
{
    <div class="alert alert-danger">
        <p>@Error</p>
    </div>
}

<div class="container">

    <section class="section register min-vh-100 d-flex flex-column align-items-center justify-content-center py-4">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center">

                    <div class="d-flex justify-content-center py-4">
                        <a href="index.html" class="logo d-flex align-items-center w-auto">
                            <img src="assets/img/logo.png" alt="">
                            <span class="d-none d-lg-block">PoPoy Admin</span>
                        </a>
                    </div><!-- End Logo -->

                    <div class="card mb-3">

                        <div class="card-body">

                            <div class="pt-4 pb-2">
                                <h5 class="card-title text-center pb-0 fs-4">Login to Your Account</h5>
                                <p class="text-center small">Enter your username & password to login</p>
                            </div>
                            <EditForm class="row g-3 needs-validation" Model="LoginModel" OnValidSubmit="HandleLogin">
                                <DataAnnotationsValidator></DataAnnotationsValidator>

                                <div class="col-12">
                                    <label class="form-label" for="username">Username</label>
                                    <InputText id="username" class="form-control" @bind-Value="LoginModel.UserName"></InputText>
                                    <ValidationMessage class="invalid-feedback" For="()=> LoginModel.UserName"></ValidationMessage>
                                </div>

                                <div class="form-group">
                                    <label for="password" class="form-label">Password</label>
                                    <InputText id="password" type="password" class="form-control" @bind-Value="LoginModel.Password"></InputText>
                                    <ValidationMessage class="invalid-feedback" For="()=> LoginModel.Password"></ValidationMessage>
                                </div>
                                @* <div class="col-12">
                                <div class="form-check">
                                <InputCheckbox @bind-Value="LoginModel." class="form-check-input" type="checkbox" name="remember" value="true" id="rememberMe"></InputCheckbox>
                                <label class="form-check-label" for="rememberMe">Remember me</label>
                                </div>
                                </div>*@
                                <button class="btn btn-primary w-100" type="submit">Login</button>
                               
                            </EditForm>

                        </div>
                    </div>



                </div>
            </div>
        </div>

    </section>

</div>

@code {
    private bool ShowErrors;
    private string Error = "";
    private LoginRequest LoginModel = new LoginRequest();
    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(LoginModel);
        if (result.Success)
        {
            if (result.RoleNames.Any(p => p.Contains(RoleName.Customer)))
            {
                _toastSvc.ShowError("Xin lỗi bạn không đủ quyền truy cập !");
            }
            else if (result.RoleNames.Contains(RoleName.Shipper))
            {
                NavigationManager.NavigateTo("/shipper");
            }
            else
            NavigationManager.NavigateTo("/");
        }
        else
        {

            _toastSvc.ShowError(result.Message);
        }
    }
    protected override void OnInitialized()
    {

        if (ShowErrors)
        {
            _toastSvc.ShowError(Error);
        }
    }
}