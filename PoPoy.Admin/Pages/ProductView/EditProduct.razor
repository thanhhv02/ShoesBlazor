@page "/updateProduct/{Id}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@using PoPoy.Shared.Dto;
@using System.Net.Http.Headers
@inject HttpClient httpClient;

@if (ShowErrors)
{
    <span class="alert alert-danger">@Message</span>
}
else
{
    <h1 class="mt-4 ml-3 mb-3">Cập nhật người dùng</h1>
    <div class="card-body ml-3">
        <EditForm Model="Product" OnValidSubmit="UpdateProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group">
                <label for="title">Tên sản phẩm</label>
                <InputText id="title" class="form-control" @bind-Value="Product.Title"></InputText>
                <ValidationMessage For="()=> Product.Title"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="description">Mô tả</label>
                <InputText id="description" class="form-control" @bind-Value="Product.Description"></InputText>
                <ValidationMessage For="()=> Product.Description"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="price">Giá</label>
                <InputNumber id="price" class="form-control" @bind-Value="Product.Price"></InputNumber>
                <ValidationMessage For="()=> Product.Price"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="originalPrice">Giá gốc</label>
                <InputNumber id="originalPrice" class="form-control" @bind-Value="Product.OriginalPrice"></InputNumber>
                <ValidationMessage For="()=> Product.OriginalPrice"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="quantity">Số lượng</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="Product.Quantity"></InputNumber>
                <ValidationMessage For="()=> Product.Quantity"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="stock">Stock</label>
                <InputNumber id="stock" class="form-control" @bind-Value="Product.Stock"></InputNumber>
                <ValidationMessage For="()=> Product.Stock"></ValidationMessage>
            </div>
            @try
            {

                @if (Product.ProductImages.Any() && Product.ProductImages != null)
                {
                    <div class="d-flex flex-wrap photo-upload">
                        @foreach (var item in Product.ProductImages)
                        {
                            <div class="photodetail w-25 p-1">
                                <img class="w-100" src="@item.ImagePath" />
                                <span class="btn btn-danger" @onclick="() => DeleteImage(item.Id)">Delete</span>
                            </div>
                            @*<div class="form-group">
                        <img src="images/food/@(item.FileName)" class="w-25 photodetail"/>
                        </div>*@
                        }
                    </div>


                }
            }
            catch
            {

            }
        <div class="form-group">
            <label class="custom-file-upload">
                <InputFile class="form-control" OnChange="OnInputFileChange" id="file-upload" accept=".gif,.jpg,.jpeg,.png"></InputFile>
                <i class="fa fa-cloud-upload"></i> Chọn ảnh
            </label>
            @*<label for="file-upload" class="form-label">Chọn hình</label>
        <InputFile class="form-control" OnChange="OnInputFileChange" id="file-upload"></InputFile>*@
        </div>
            <button type="submit" class="btn btn-primary mt-3">Lưu lại</button>
        </EditForm>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();
    public ProductVM Product = new ProductVM();
    public bool ShowErrors = false;
    public string Message;

    protected async override Task OnInitializedAsync()
    {
        Product = await ProductService.GetProductById(int.Parse(Id));
    }

    private async Task UpdateProduct()
    {
        await ProductService.UpdateProduct(Product);
        NavigationManager.NavigateTo("/listProduct");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }
        var response = await httpClient.PostAsync($"/api/product/upload-image?id={Id}", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
        Product = await ProductService.GetProductById(int.Parse(Id));
        StateHasChanged();
    }

    private async void DeleteImage(int imageId)
    {
        await ProductService.DeleteFile(imageId);
        Product = await ProductService.GetProductById(int.Parse(Id));
        StateHasChanged();
    }
}
