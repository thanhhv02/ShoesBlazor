@page "/updateProduct/{Id}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@using PoPoy.Admin.Extensions
@using PoPoy.Shared.Common
@using PoPoy.Shared.Dto;
@using System.Net.Http.Headers
@inject HttpClient httpClient;
@inject Radzen.DialogService dialogService;

@if (ShowErrors)
{
    <span class="alert alert-danger">@Message</span>
}
else
{
    <div class="card-body ml-3 col-12">
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Thông tin chung">
                    <EditForm Model="Product" OnValidSubmit="UpdateProduct">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <div class="text-field col-lg-12 mb-4">
                            <label for="title">Tên sản phẩm</label>
                            <InputText id="title" @bind-Value="Product.Title"></InputText>
                            <ValidationMessage For="()=> Product.Title"></ValidationMessage>
                        </div>
                        <div class="text-field col-lg-12 mb-4">
                            <label for="description">Mô tả</label>
                            @*<InputText id="description" @bind-Value="Product.Description"></InputText>*@
                            <RadzenHtmlEditor @bind-Value=@Product.Description style="height: 300px; margin-bottom: 1rem; border: 1px solid darkblue" UploadUrl="upload/image">
                                <RadzenHtmlEditorUndo />
                                <RadzenHtmlEditorRedo />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorBold />
                                <RadzenHtmlEditorItalic />
                                <RadzenHtmlEditorUnderline />
                                <RadzenHtmlEditorStrikeThrough />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorColor />
                                <RadzenHtmlEditorBackground />
                                <RadzenHtmlEditorRemoveFormat />
                            </RadzenHtmlEditor>
                            <ValidationMessage For="()=> Product.Description"></ValidationMessage>

                        </div>
                        <div class="text-field col-lg-12 mb-4">
                            <label for="price">Giá</label>
                            <InputNumber id="price" @bind-Value="Product.Price"></InputNumber>
                            <ValidationMessage For="()=> Product.Price"></ValidationMessage>
                        </div>
                        <div class="text-field col-lg-12 mb-4">
                            <label for="originalPrice">Giá gốc</label>
                            <InputNumber id="originalPrice" @bind-Value="Product.OriginalPrice"></InputNumber>
                            <ValidationMessage For="()=> Product.OriginalPrice"></ValidationMessage>
                        </div>
                        @try
                        {

                            @if (Product.ProductImages.Any() && Product.ProductImages != null)
                            {
                                <div class="d-flex flex-wrap photo-upload">
                                    @foreach (var item in Product.ProductImages)
                                    {
                                        <div class="photodetail w-25 p-1">
                                            <img class="w-100" src="@item.ImagePath" />
                                            <RadzenButton class="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Large" 
                                            Variant="Variant.Filled" Icon="delete_forever" Click="() => DeleteImage(item.Id)"></RadzenButton>
                                        </div>
                                    }
                                </div>


                            }
                        }
                        catch
                        {

                        }
                        <div class="form-group">
                            <label class="custom-file-upload">
                                <InputFile class="form-control" OnChange="OnInputFileChange" id="file-upload" accept=".gif,.jpg,.jpeg,.png"></InputFile>
                                <i class="fa fa-cloud-upload"></i> Chọn ảnh
                            </label>
                        </div>
                        <div class="row">
                            <div class="col-md-12 text-end">
                                <RadzenButton Icon="close" Click="@((args) => dialogService.Close(false))" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" Text="Cancel" Style="width: 120px" Class="me-1" />
                                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Icon="add_circle" Text="Lưu lại" Style="width: 120px" />
                            </div>
                        </div>
                    </EditForm>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Danh mục">
                    <RadzenCard>
                       <AssignCategory Id="@Id"></AssignCategory>
                    </RadzenCard>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Thêm/chỉnh sửa thuộc tính">
                   <AssignSize Id="@Id"></AssignSize>
                  
                </RadzenTabsItem>
                <RadzenTabsItem Text="Các thuộc tính của sản phẩm này">
                   <ProductVariant Id="@Id"></ProductVariant>
                  
                </RadzenTabsItem>

            </Tabs>
        </RadzenTabs>
    </div>
    
}


@code {
    [Parameter]
    public string Id { get; set; }
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();
    public ProductVM Product = new ProductVM();
    public bool ShowErrors = false;
    public string Message;
    string value = "ALFKI";


    int IdMain = 0;


    protected async override Task OnInitializedAsync()
    {
        IdMain = int.Parse(Id);
        Product = await ProductService.GetProductById(IdMain);
       
      
        StateHasChanged();
  
   
    }

    private async Task UpdateProduct()
    {
        await ProductService.UpdateProduct(Product);
        NavigationManager.NavigateTo("/listProduct");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }
        var response = await httpClient.PostAsync($"/api/product/upload-image?id={Id}", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
        Product = await ProductService.GetProductById(int.Parse(Id));
        StateHasChanged();
    }

    private async void DeleteImage(int productId)
    {
        await ProductService.DeleteFile(productId);
        Product = await ProductService.GetProductById(int.Parse(Id));
        StateHasChanged();
    }

   



    
}
