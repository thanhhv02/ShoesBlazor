@page "/listOrder"

@inject IOrderService OrderService
@inject IAuthService AuthService

<h2 class="mt-4 ml-3 mb-3" style="color:darkblue">Danh sách đơn hàng</h2>
<div class="input-group" style="left: 950px;">
    <div class="form-outline">
        <input @bind-value="searchText"
               type="search"
               list="users"
               class="form-control"
               placeholder="Search..." />
    </div>
    <button type="button" class="btn btn-primary" @onclick="SearchOrders">
        <i class="fas fa-search"></i>
    </button>
</div>
<div class="row mt-4 ml-3">
    <table class="table">
        <thead>
            <tr>
                <th>
                    Mã đơn hàng
                </th>
                <th>
                    Tên người dùng
                </th>
                <th>
                    Địa chỉ
                </th>
                <th>
                    Ngày đặt
                </th>
                <th>
                    Tổng đơn hàng
                </th>
                <th>
                    Phương thức thanh toán
                </th>
                <th>
                    Tình trạng đơn hàng
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var items in Orders)
            {
                <tr>
                    <td>@items.Id</td>
                    <td>@Users.FirstOrDefault(x => x.Id == items.UserId).FirstName @Users.FirstOrDefault(x => x.Id == items.UserId).LastName</td>
                    <td>@Addresses.FirstOrDefault(x => x.UserId == items.UserId).Country , @Addresses.FirstOrDefault(x => x.UserId == items.UserId).City @Addresses.FirstOrDefault(x => x.UserId == items.UserId).Street @Addresses.FirstOrDefault(x => x.UserId == items.UserId).State</td>
                    <td>@items.OrderDate.ToString("MM/dd/yyyy")</td>
                    <td>@items.TotalPrice</td>
                    <td>@items.PaymentMode</td>
                    <td>@items.OrderStatus</td>
                    <td>
                        <a href="/listOrderDetails/@items.Id" class="btn btn-primary"><i class="oi oi-inbox"></i></a>
                        <button @onclick="()=> OnDeleteTask(items.Id)" class="btn btn-danger"><i class="oi oi-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<Confirmation ConfirmationMessage="Bạn chắc chắn xóa đơn hàng này?"
              ConfirmationTitle="Xóa đơn hàng"
              @ref="DeleteConfirmation"
              ConfirmationChanged="OnConfirmDeleteTask">

</Confirmation>

@code {
    private string searchText = string.Empty;
    private List<Order> Orders { get; set; } = new List<Order>();
    private List<User> Users { get; set; } = new List<User>();
    private List<Address> Addresses { get; set; } = new List<Address>();
    private string OrderId { set; get; }
    private Confirmation DeleteConfirmation { set; get; }

    protected override async Task OnInitializedAsync()
    {
        await GetOrders();
        await GetUsers();
        await GetAddress();
    }

    public void OnDeleteTask(string orderId)
    {
        OrderId = orderId;
        DeleteConfirmation.Show();
    }

    public async Task OnConfirmDeleteTask(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await OrderService.DeleteOrder(OrderId);
            await GetOrders();
            StateHasChanged();
        }
    }

    private async Task GetOrders()
    {
        var pagingResponse = await OrderService.GetAllOrders();
        if (searchText != null)
        {
            Orders = pagingResponse;
        }
    }

    private async Task GetUsers()
    {
        var pagingResponse = await AuthService.GetUsers();
        Users = pagingResponse;
    }

    private async Task GetAddress()
    {
        var pagingResponse = await AuthService.GetAddresses();
        Addresses = pagingResponse;
    }

    public async Task SearchOrders()
    {
        var pagingResponse = await OrderService.GetAllOrders();
        if (!String.IsNullOrEmpty(searchText))
        {
            Orders = await OrderService.SearchOrder(searchText);
        }
        else
        {
            Orders = pagingResponse;
        }
    }
}
