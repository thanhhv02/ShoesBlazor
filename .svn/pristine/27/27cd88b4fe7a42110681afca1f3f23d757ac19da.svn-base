@page "/cart"
@inject ICartService CartService
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService _toastSvc;
@inject ICartState CartState
@using PoPoy.Client.Services.ProductService
@using PoPoy.Client.Services.CartService;
@using PoPoy.Client.State;
@using PoPoy.Shared.Dto
<PageInfos Title="Giỏ hàng"></PageInfos>

<BackToTop></BackToTop>

@if (carts is null)
{
    <h2>Giỏ hàng</h2>
    <LoadingScreen></LoadingScreen>
}
else if (carts.Count == 0)
{
    <h2>Hiện tại không có sản phẩm nào trong giỏ hàng của bạn.</h2>
}
else
{
    <h2>Giỏ hàng</h2>

    <div class="row">
        <div class="col-sm-9">
            <hr />
            @foreach (var cart in carts)
            {
                <div class="row">
                    @if (cart.Product.ProductImages != null && cart.Product.ProductImages.Any())
                    {
                        <img src="@cart.Product.ProductImages.FirstOrDefault().ImagePath" class="col-sm-2" style=" height: 150px; object-fit: contain;">
                    }
                    <div class="hidden">@cart.Product.Id</div>
                    <div class="col-sm-8">
                        <h4>@cart.Product.Title</h4>
                        <SelectQuantity Model="@cart" CartUpdateType="CartUpdateType.Update" QuantityChanged="() => StateHasChanged()" />
                        <div class="d-flex flex-row align-items-center mt-3">
                            <i class="oi oi-trash"></i>
                            <a href="javascript:void(0)" @onclick="@(() => RemoveCart(cart))">Xóa</a>
                        </div>
                    </div>
                    <div class="hidden">
                        @cart.Product.Id
                    </div>
                    <div class="col-sm-2">
                        <h4>@cart.Product.Price.ToString("n0")</h4>
                    </div>
                </div>
                <hr />
            }
        </div>
        <div class="col-sm-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-subtitle mb-2">Tổng số @(CalcTotalQuantity()) sản phẩm (đã bao gồm thuế) </h5>
                    <h4 class="card-title text-danger">@CalcTotalAmount().ToString("n0")</h4>
                    <div style="text-align:left;margin:0px;">
                        <EditForm Model="paymentModel">
                            <InputRadioGroup @bind-Value="paymentModel.Name">
                                @foreach (var option in rdOptions)
                                {
                                <InputRadio Value="option" /> @option <br />
                                }
                        </InputRadioGroup>
                    </EditForm>
                </div>
                @if (@paymentModel.Name == "CashOnDelivery")
                    {
                        <div class="d-grid gap-2 mx-auto">
                            <button class="btn btn-warning" @onclick="@(() => CheckOut())" disabled="@buttonDisabled">Đặt hàng</button>
                        </div>
                    }
                    else
                    {
                        <div class="d-grid gap-2 mx-auto">
                            <button class="btn btn-warning" @onclick="@(() => CheckOut())" disabled="@buttonDisabled">Thanh toán Paypal</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code { private List<Cart> carts;
    private bool buttonDisabled;
    private bool showButton = false;
    public bool IsUserLoggedIn = false;

    Address addressModel = new Address();
    PaymentModeModel paymentModel = new PaymentModeModel()
        {
            Name = "CashOnDelivery" // default value
        };

    List<string> rdOptions = new List<string> { "CashOnDelivery", "PayPal" };

    protected override async Task OnInitializedAsync()
    {
        var userId = await LocalStorage.GetItemAsync<Guid>("getUserId");
        carts = await CartService.GetAllAsync();
        await CartState.UpdateAsync();
        addressModel.UserId = userId;
    }

    private decimal CalcTotalAmount()
        => carts.Sum(x => x.CalcAmount());

    private int CalcTotalQuantity()
        => carts.Sum(x => x.Quantity);


    private async Task RemoveCart(Cart cart)
    {
        await CartService.RemoveAsync(cart.Product.Id);
        carts = await CartService.GetAllAsync();
        StateHasChanged();
    }
    //private async Task PayPalPayment()
    //{
    //    var total = CalcTotalAmount() * CalcTotalQuantity();
    //    var url = await AuthService.MakePayPalPayment((double)total);
    //    await CheckOut();
    //    NavigationManager.NavigateTo(url);
    //}
    private async Task CheckOut()
    {
        try
        {
            var userId = await LocalStorage.GetItemAsync<Guid>("getUserId");
            var address = await AuthService.GetAddress(userId);
            if (address != null)
            {
                var finalTotal = CalcTotalAmount() * CalcTotalQuantity();
                if (paymentModel.Name == "PayPal")
                {
                    carts.FirstOrDefault().AddressId = address.Id;
                    carts.FirstOrDefault().PayPalPayment = (double)finalTotal;
                    carts.FirstOrDefault().PaymentMode = paymentModel.Name;
                    var total = CalcTotalAmount() * CalcTotalQuantity();
                    var url = await AuthService.MakePayPalPayment((double)total);
                    NavigationManager.NavigateTo(url);
                }
                var productId = await LocalStorage.GetItemAsync<int>("getProductId");
                buttonDisabled = true;
                if (carts != null && carts.Count > 0)
                {
                    carts.FirstOrDefault().Price = CalcTotalAmount();
                    carts.FirstOrDefault().Quantity = CalcTotalQuantity();
                    carts.FirstOrDefault().PaymentMode = paymentModel.Name;
                    carts.FirstOrDefault().AddressId = address.Id;
                    carts.FirstOrDefault().ProductId = productId;
                }
                if (userId != null)
                {
                    carts.FirstOrDefault().UserId = userId;
                    addressModel.UserId = userId;
                }

                IsUserLoggedIn = await AuthService.IsUserAuthenticated();
                if (IsUserLoggedIn)
                {
                    var response = await AuthService.Checkout(carts);
                    if (response)
                    {
                        carts.Clear();
                        await CartService.RemoveAllAsync();
                        if (paymentModel.Name != "PayPal")
                        {
                            StateHasChanged();
                            NavigationManager.NavigateTo("/");
                            _toastSvc.ShowSuccess("Thanh toán thành công");
                        }
                    }
                }
                else
                {
                    await LocalStorage.SetItemAsync("checkoutAlert", "Cannot checkout probably!");
                    NavigationManager.NavigateTo("login");
                }
            }
            else
            {
                NavigationManager.NavigateTo($"/user/profile/{userId}");
                _toastSvc.ShowError("Mời nhập địa chỉ");
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            buttonDisabled = false;
        }
    }
}