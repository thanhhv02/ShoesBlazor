@page "/cart"
@inject ICartService CartService
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IToastService _toastSvc
@inject ICartState CartState
@inject IProductService _prodSvc
@inject HttpClient _httpClient

<PageInfos Title="Giỏ hàng"></PageInfos>



@if (carts is null)
{
    <h2>Giỏ hàng</h2>
    <LoadingScreen></LoadingScreen>
}
else if (carts.Count == 0)
{
    <h2>Hiện tại không có sản phẩm nào trong giỏ hàng của bạn.</h2>
}
else
{
    <h2>Giỏ hàng</h2>

    <div class="row">
        <div class="col-sm-9">
            <hr />
            @foreach (var cart in carts)
            {
                if (cart is null)
                {
                    <h2>Không tồn tại sản phẩm này!</h2>
                }
                else
                {
                    <div class="row">
                        @if (cart.Product.ProductImages != null && cart.Product.ProductImages.Any())
                        {
                            <img src="@cart.Product.ProductImages.FirstOrDefault().ImagePath" class="col-sm-2" style=" height: 150px; object-fit: contain;">
                        }
                        <div class="col-sm-8">
                            <h4>@cart.Product.Title - @cart.Size</h4>
                            <SelectQuantity Model="@cart" CartUpdateType="CartUpdateType.Update" QuantityChanged="() => StateHasChanged()" />
                            <div class="d-flex flex-row align-items-center mt-3">
                                <i class="oi oi-trash"></i>
                                <a href="javascript:void(0)" @onclick="@(() => RemoveCart(cart))">Xóa</a>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <h4>@cart.Product.Price.ToString("n0")</h4>
                        </div>
                    </div>
                    <hr />
                }
            }
        </div>
        <div class="col-sm-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-subtitle mb-2">Tổng số @(CalcTotalQuantity()) sản phẩm (đã bao gồm thuế) </h5>
                    <h4 class="card-title text-danger">@CalcTotalAmount().ToString("n0")</h4>
                    <div style="text-align:left;margin:0px;">
                        <EditForm Model="paymentModel">
                            <InputRadioGroup @bind-Value="paymentModel.Name">
                                @foreach (var option in rdOptions)
                                {
                                    <InputRadio Value="option" /> @option <br />
                                }
                            </InputRadioGroup>
                        </EditForm>
                    </div>
                    @if (@paymentModel.Name == "CashOnDelivery")
                    {
                        <div class="d-grid gap-2 mx-auto">
                            <button class="btn btn-warning" @onclick="@(() => CheckOut())" disabled="@buttonDisabled">Đặt hàng</button>
                        </div>
                    }
                    @if (@paymentModel.Name == "VNPay")
                    {
                        <div class="d-grid gap-2 mx-auto">
                            <button class="btn btn-warning" @onclick="@(() => CheckOut())" disabled="@buttonDisabled">Thanh toán VNPay</button>
                        </div>
                    }
                    @if (@paymentModel.Name == "PayPal")
                    {
                        <div class="d-grid gap-2 mx-auto">
                            <button class="btn btn-warning" @onclick="@(() => CheckOut())" disabled="@buttonDisabled">Thanh toán Paypal</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Cart> carts = new List<Cart>();
    private bool buttonDisabled;
    private bool showButton = false;
    public bool IsUserLoggedIn = false;
    public bool ContinueCheckout = true;
    public int productStock { get; set; }
    public int productQuantity { get; set; }
    [Inject] private IBroadCastService broadCastService { get; set; }
    [Inject] private IConfiguration configuration { get; set; }

    private List<ProductSize> List_Size = new List<ProductSize>();
    Address addressModel = new Address();
    PaymentModeModel paymentModel = new PaymentModeModel()
        {
            Name = "CashOnDelivery" // default value
        };

    List<string> rdOptions = new List<string> { "CashOnDelivery", "PayPal", "VNPay" };

    protected override async Task OnInitializedAsync()
    {
        var userId = await LocalStorage.GetItemAsync<Guid>("getUserId");
        carts = await CartService.GetAllAsync();

        await CartState.UpdateAsync();
        addressModel.UserId = userId;
    }

    private decimal CalcTotalAmount()
        => carts.Sum(x => x.CalcAmount());

    private int CalcTotalQuantity()
        => carts.Sum(x => x.Quantity);


    private async Task RemoveCart(Cart cart)
    {
        await CartService.RemoveAsync(cart.ToCartStorage());
        carts = await CartService.GetAllAsync();
        StateHasChanged();
    }

    private async Task CheckOut()
    {
        try
        {
            var userId = await LocalStorage.GetItemAsync<Guid>("getUserId");
            var address = await AuthService.GetAddress(userId);
            var finalTotal = CalcTotalAmount();
            foreach (var item in carts)
            {
                productStock = await GetQuantity(item.SizeId, item.ProductId);
                productQuantity = item.Quantity;
                if (productStock < productQuantity)
                {
                    _toastSvc.ShowError("Số lượng sản phẩm không đủ!");
                    ContinueCheckout = false;
                    break;
                }
                else
                {
                    ContinueCheckout = true;
                    break;
                }
            }
            if (address == null)
            {
                NavigationManager.NavigateTo($"/user/setting/{userId}");
                _toastSvc.ShowError("Bạn phải nhập địa chỉ");
            }
            if (address != null && ContinueCheckout)
            {
                if (paymentModel.Name == "VNPay")
                {
                    carts.FirstOrDefault().AddressId = address.Id;
                    carts.FirstOrDefault().PayPalPayment = (double)finalTotal;
                    carts.FirstOrDefault().PaymentMode = paymentModel.Name;
                    var total = CalcTotalAmount();
                    total *= 100;
                    var url = await AuthService.MakeVNPayPayment((double)total);
                    NavigationManager.NavigateTo(url);
                }
                if (paymentModel.Name == "PayPal")
                {
                    carts.FirstOrDefault().AddressId = address.Id;
                    carts.FirstOrDefault().PayPalPayment = (double)finalTotal;
                    carts.FirstOrDefault().PaymentMode = paymentModel.Name;
                    var total = CalcTotalAmount();
                    var url = await AuthService.MakePayPalPayment((double)total);
                    NavigationManager.NavigateTo(url);

                }
                buttonDisabled = true;
                if (carts != null && carts.Count > 0)
                {
                    foreach (var item in carts)
                    {
                        addressModel.UserId = userId;
                        carts.FirstOrDefault().ProductId = item.ProductId;
                        carts.FirstOrDefault().UserId = userId;
                        carts.Where(x => x.Product.Id == item.Product.Id).FirstOrDefault(x => x.SizeId == item.SizeId).Size = item.Size;
                        carts.Where(x => x.Product.Id == item.Product.Id).FirstOrDefault(x => x.SizeId == item.SizeId).Price = item.Product.Price;
                        carts.Where(x => x.Product.Id == item.Product.Id).FirstOrDefault(x => x.SizeId == item.SizeId).Quantity = item.Quantity;
                    }
                    carts.FirstOrDefault().TotalPrice = CalcTotalAmount();
                    carts.FirstOrDefault().CheckoutCount = 1;
                    carts.FirstOrDefault().PaymentMode = paymentModel.Name;
                    carts.FirstOrDefault().AddressId = address.Id;
                }

                IsUserLoggedIn = await AuthService.IsUserAuthenticated();
                if (IsUserLoggedIn)
                {
                    var orderId = await AuthService.Checkout(carts);
                    if (orderId != null)
                    {
                        carts.Clear();
                        await CartService.RemoveAllAsync();
                        StateHasChanged();
                        if (paymentModel.Name != "PayPal")
                        {
                            NavigationManager.NavigateTo("payment-thanks");
                            _toastSvc.ShowSuccess("Thanh toán thành công");


                            //send thông báo cho admin

                            var hostAdmin = configuration["AdminUrl"];
                            NotiSendConfig config = new NotiSendConfig(title: "Có đơn hàng mới",
                            message: $"Có một đơn hàng mới được đặt", dataUrl: $"{hostAdmin}/listOrderDetails/{orderId}");
                            await broadCastService.SendNotiAllAdmin(config);

                            //send thông báo cho người đặt hàng

                            NotiSendConfig config2 = new NotiSendConfig(title: "Đặt hàng thành công",
                            message: $"Đơn hàng {orderId} được đặt thành công", dataUrl: $"user/list-order");
                            await broadCastService.SendNotiCurrentUser(config2);
                        }
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("login");
                    _toastSvc.ShowError("Bạn phải đăng nhập trước khi checkout");
                }
            }
            else
            {
                _toastSvc.ShowError("Không thể thanh toán! Vui lòng liên hệ nhân viên bộ phận kỹ thuật");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            buttonDisabled = false;
        }
    }
    public async Task<int> GetQuantity(int sizeid, int prodid)
        {
            var res = await _httpClient.GetAsync($"/api/product/get-quantity-of-product?sizeId={sizeid}&Prodid={prodid}");
            var result = await res.Content.ReadAsStringAsync();
            return Convert.ToInt32(result.ToString());
        }
}