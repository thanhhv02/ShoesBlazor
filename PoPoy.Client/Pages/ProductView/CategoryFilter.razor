@inject ICategoryService CategoryService
@inject IProductService _productSvc
@inject NavigationManager  navigationManager

@if (name != null)
{
    <PageInfos Title="@name"></PageInfos>
}
<RadzenMediaQuery Query="(max-width: 768px)" Change="@OnChangeMedia">
</RadzenMediaQuery>
    <div class="box">
    <h3 class="filter-header">
        Danh mục
    </h3>
    <ul class="filter-list">
        @foreach (var category in CategoryService.Categories)
        {
            <li><a class="pointer"  style="width:1000px" @onclick="()=>OnClicked(category)">@category.Name</a></li>
        }
    </ul>
</div>


@code {
    public string name { get; set; }
    [Parameter]
    public ProductParameters productParameters{ get; set; }
    [Parameter]
    public EventCallback<IEnumerable<int>> ColorChanged { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<int>> SizeChanged { get; set; }

    [Parameter]
    public bool ShowFiller { get; set; } = true;
    List<ProductColor> productColors = new List<ProductColor>();
    List<ProductSize> productSizes = new List<ProductSize>();
    IEnumerable<int> ColorIdSelecteds = new int[] {  };
    IEnumerable<int> SizeIdSelecteds = new int[] {  };
    private bool forceLoad = true;
    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetCategories();
        productColors = await _productSvc.GetAllColorProduct();
        productSizes = await _productSvc.GetAllSizeProduct();
    }
    async Task OnSelectColor()
    {
        await ColorChanged.InvokeAsync(ColorIdSelecteds);
    }
    async Task OnSelectSize()
    {
        await SizeChanged.InvokeAsync(SizeIdSelecteds);
    }
    public void OnClicked(CateVM cate)
    {
        this.name = cate.Name;
        navigationManager.NavigateTo($"/category/{cate.Url}", forceLoad);
    }
    private void OnChangeMedia(bool matches)
    {
        forceLoad = matches;
    }
}
