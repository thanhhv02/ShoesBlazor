@inject IAuthService AuthService;
@inject IUserAvatarService _avtSvc;
@implements IDisposable;
<AuthorizeView>
    <Authorized>
        <div class="author__avatar">
            @if (AvatarPath != null)
            {
                <img src="@AvatarPath" alt="avatar" style="width: 35px; height: 35px; border-radius:50%">
            }
            else
            {
                <img src="/images/avatar.jpg" alt="avatar" style="width: 35px; height: 35px; border-radius:50%">
            }
        </div>
        <div class="autor__info">
            <p class="name">@context.User.GetFullName()</p>
            @*<p class="ammount">8,000 LND</p>*@
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private int cartCount;
    private List<Cart> carts { get; set; } = new List<Cart>();
    public User user = new User();
    public string AvatarPath { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await CheckUserAvatarPath();
        _avtSvc.OnAvatarChanged += CheckAvatarChanged;
    }

    public async Task CheckUserAvatarPath()
    {
        var _user = (await AuthStat).User;

        if (_user.Identity?.IsAuthenticated == true)
        {
            var temp = await AuthService.GetUserFromId(_user.GetUserId());
            AvatarPath = temp.Data.AvatarPath;
        }
    }
    public async void CheckAvatarChanged()
    {
        await CheckUserAvatarPath();
        StateHasChanged();
    }
    public void Dispose()
    {
        _avtSvc.OnAvatarChanged -= CheckAvatarChanged;
    }
}
