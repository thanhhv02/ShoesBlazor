@inject NavigationManager NavigationManager
@inject IProductService PublicProductService
@inject IReviewService ReviewService
@inject IPublicReviewService PublicReviewService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthProvider

<div class="row mb-3">
    @try
    {
        if (product.ProductImages.FirstOrDefault().ImagePath != null)
        {
            <img src="@product.ProductImages.FirstOrDefault().ImagePath" style=" height: 100px; width:100px; object-fit: contain;">
        }
    }
    catch
    {

    }
   
    @product.Title
</div>

@if (Mode == FormEditMode.Update && review.Id == 0)
{
    <LoadingScreen></LoadingScreen>
}
else if (Mode == FormEditMode.Update && !isMyReview)
{
    <p>Không tìm thấy đánh giá。</p>
}
else
{
    <EditForm Model="@review" OnValidSubmit="@(() => Mode == FormEditMode.New ? Post() : Put())" style="margin: 0 auto; text-align: center;" align = "center">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group mb-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Đánh giá theo bậc</RadzenText>
                <RadzenRating Style="font-size: 20px" Change=@(args => OnQuantityChanged(args)) />
            <RatingStar Rating="@review.Rating"></RatingStar>
           @* <InputSelect class="form-control" Value="@review.Rating" ValueExpression="@(() => review.Rating)"
                     ValueChanged="@((int value) => OnQuantityChanged(value))" style="width: 150px;">
                @foreach (int value in Enumerable.Range(1, 5))
                {
                    <option value="@value">@value</option>
                }
            </InputSelect>*@
            @review.Title
        </div>
@*        <div class="form-group mb-3" style="width: 70%;">
            <label class="mb-2">Tiêu đề</label>
            <InputText class="form-control" @bind-Value="@review.Title"></InputText>
        </div>*@ 
        <div class="form-group mb-3">
            <label class="mb-2">Nội dung đánh giá</label>
            <InputTextArea class="form-control" @bind-Value="@review.ReviewText" style="width: 70%;"></InputTextArea>
        </div>
        <button type="submit" class="btn btn-primary mb-3">Xác nhận</button>
    </EditForm>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    [Parameter]
    public int ReviewId { get; set; }

    [Parameter]
    public FormEditMode Mode { get; set; }

    private Review review = new();
    private Product product = new();
    private bool isMyReview;

    private void OnQuantityChanged(int rating){
        switch(rating){
            case 1:
                review.Title = "Cực kỳ không hài lòng";
                break;
            case 2:
                review.Title = "Không hài lòng";
                break;
            case 3:
                review.Title = "Bình thường";
                break;
            case 4:
                review.Title = "Hài lòng";
                break;
            default:
                review.Title = "Cực kỳ hài lòng";
                break;
        }
        review.Rating = rating;
    }
        

    protected override async Task OnInitializedAsync()
    {
        var result = await PublicProductService.Get(ProductId);
        if (result.Success)
        {
            product = result.Data;
            Console.WriteLine(product != null);
        }
        review.ProductId = product.Id;
        review.Title = "Cực kỳ hài lòng";
        if (Mode == FormEditMode.Update)
        {
            review = await PublicReviewService.GetAsync(ReviewId);
            isMyReview = await IsMyReview(review.UserId);
        }
    }

    private async Task Post()
    {
        await ReviewService.PostAsync(review);
        NavigationManager.NavigateTo($"/product-detail/{review.ProductId}");
        //await JSRuntime.InvokeVoidAsync("showInfoToast", "レビューを投稿しました。");
    }

    private async Task Put()
    {
        await ReviewService.PutAsync(review);
        NavigationManager.NavigateTo($"/product-detail/{review.ProductId}");
        //await JSRuntime.InvokeVoidAsync("showInfoToast", "レビューを修正しました。");
    }

    private async ValueTask<bool> IsMyReview(Guid reviewUserId)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (Guid.TryParse(authState.User.GetUserId(), out Guid value))
        {
            return reviewUserId == value;
        }
        return false;
    }

    private async Task OnChange(int value)
    {

    }
}
