@inject ICartService CartService
@inject IProductService _prodSvc;
@inject HttpClient _httpClient
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using PoPoy.Client.Services.CartService
@using PoPoy.Shared.Dto

<div class="d-flex flex-row align-items-center mt-3">
    <EditForm Model="@Model">
        <RadzenCard Class="w-100">
            @if (productVariants?.Count != 0)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Chọn size</RadzenText>
                <RadzenRadioButtonList @bind-Value=@Model.SizeId TValue="int" Change=@((args) => OnSizeChanged(args, Model))>
                    <Items>

                        @foreach (var num in productVariants.GroupBy(x => x.SizeId).Select(grp => grp.First()))
                        {
                            <RadzenRadioButtonListItem Text="@num.Size.SizeName" Value="@num.SizeId" />
                        }

                    </Items>
                </RadzenRadioButtonList>

                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Chọn màu</RadzenText>
                <RadzenRadioButtonList @bind-Value=@Model.ColorId TValue="int" Change=@((args) => OnColorChanged(args, Model))>
                    <Items>

                        @foreach (var num in productVariants.Where(x => x.SizeId == Model.SizeId).ToList().GroupBy(x => x.ColorId).Select(grp => grp.First()))
                        {

                            <RadzenRadioButtonListItem Text="@num.Color.ColorName.GetEnumDisplayName()" Value="@num.ColorId" />
                        }

                    </Items>
                </RadzenRadioButtonList>
                
                <SelectQuantity MAX_QUANTITY_PRODUCT="@GetSelectedVariant().Quantity" Model="@Model" CartUpdateType="CartUpdateType.Add" />
            }
        </RadzenCard>
    </EditForm>
    

</div>
@code {
    [Parameter]
    public Cart Model { get; set; } = new Cart();

    [Parameter]
    public List<ProductQuantity> productVariants { get; set; } = new List<ProductQuantity>();

    public List<ProductSize> List_Size { get; set; } = new List<ProductSize>();
    [Parameter]
    public EventCallback<string> QuantityChanged { get; set; }
    [Parameter]
    public CartUpdateType CartUpdateType { get; set; }
    [Parameter]
    public int Product_Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Model.SizeId == 0)
        {
            Model.SizeId = (productVariants.Count > 0 || productVariants is not null) ? productVariants[0].SizeId : 0;
        }
        if (Model.ColorId == 0)
        {
            Model.ColorId = (productVariants.Where(x => x.SizeId == Model.SizeId).ToList().Count > 0
                            || productVariants.Where(x => x.SizeId == Model.SizeId).ToList() is not null)
                            ? productVariants.Where(x => x.SizeId == Model.SizeId).FirstOrDefault().ColorId : 0;
        }
        await QuantityChanged.InvokeAsync(GetSelectedVariant().Price.ToString());
    }
    private async void OnSizeChanged(int sizeid, Cart cart)
    {
        Model.SizeId = sizeid;
        Model.ColorId = productVariants.Where(x => x.SizeId == Model.SizeId).FirstOrDefault().ColorId;
        if (CartUpdateType is CartUpdateType.Update)
        {
            await CartService.UpdateAsync(cart.ToCartStorage());
        }
        StateHasChanged();

        await QuantityChanged.InvokeAsync(GetSelectedVariant().Price.ToString());
    }
    private async void OnColorChanged(int colorid, Cart cart)
    {
        Model.ColorId = colorid;
        if (CartUpdateType is CartUpdateType.Update)
        {
            await CartService.UpdateAsync(cart.ToCartStorage());
        }
        await QuantityChanged.InvokeAsync(GetSelectedVariant().Price.ToString());
    }
    private ProductQuantity GetSelectedVariant()
    {
        var variant = productVariants.FirstOrDefault(x => x.ProductId == Product_Id && x.SizeId == Model.SizeId && x.ColorId == Model.ColorId);
        return variant;
    }
}

